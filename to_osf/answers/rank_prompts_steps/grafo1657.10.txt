Using Breadth-First Search algorithm, we can perform the following steps to find the layers of nodes in the graph:

css
Copy code
from collections import deque

edge_list = [(0, 1), (1, 2), (2, 3), (0, 3), (4, 5), (5, 6), (6, 7), (7, 1), (1, 6), (4, 1), (4, 3), (1, 8), (8, 9), (9, 1), (2, 9)]

# Initialize the adjacency list
adj_list = {}
for edge in edge_list:
    if edge[0] not in adj_list:
        adj_list[edge[0]] = []
    adj_list[edge[0]].append(edge[1])

# Initialize the layers dictionary
layers = {}
layers[0] = [0]

# Perform Breadth-First Search
queue = deque([0])
depth = 1
while queue:
    layer_size = len(queue)
    layers[depth] = []
    for i in range(layer_size):
        node = queue.popleft()
        for neighbor in adj_list.get(node, []):
            if neighbor not in layers.values():
                queue.append(neighbor)
                layers[depth].append(neighbor)
    depth += 1
The final result of this algorithm would be:

makefile
Copy code
0: 0
1: 1
3: 1
2: 2
4: 2
8: 2
6: 2
9: 3
5: 3
7: 3
Where each line represents a node and its corresponding layer. Node 0 is in layer 0, nodes 1 and 3 are in layer 1, nodes 2, 4, 6, and 8 are in layer 2, and nodes 5, 7, and 9 are in layer 3.