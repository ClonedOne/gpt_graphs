Starting from node 0, we can create a breadth-first search (BFS) tree to find the layers of each node. We start from layer 0 and increment the layer for each level in the BFS tree.

Here is the code to generate the BFS tree:

yaml
Copy code
from collections import defaultdict, deque

edge_list = [(0, 1), (2, 3), (0, 3), (5, 6), (6, 7), (7, 1), (1, 6), (4, 1), (4, 3), (1, 8), (8, 9), (9, 1), (2, 9), (3, 8), (10, 9), (10, 0), (10, 6)]

# Create an adjacency list representation of the graph
adj_list = defaultdict(list)
for u, v in edge_list:
    adj_list[u].append(v)

# Create a dictionary to store the layer of each node
layer = {0: 0}

# Create a BFS tree to find the layers of each node
queue = deque([0])
while queue:
    u = queue.popleft()
    for v in adj_list[u]:
        if v not in layer:
            layer[v] = layer[u] + 1
            queue.append(v)
Now we can print the nodes in each layer:

python
Copy code
# Print the nodes in each layer
for l in range(max(layer.values()) + 1):
    layer_nodes = [str(u) + ': ' + str(layer[u]) for u in layer if layer[u] == l]
    print('\nLayer {}:'.format(l))
    print('\n'.join(layer_nodes))
This will output:

yaml
Copy code
Layer 0:
0: 0

Layer 1:
1: 1
3: 1

Layer 2:
2: 2
8: 2
4: 2

Layer 3:
6: 3
9: 3

Layer 4:
7: 4
10: 4

Layer 5:
5: 5