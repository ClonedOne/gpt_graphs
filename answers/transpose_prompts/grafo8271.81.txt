python
Copy code
from itertools import permutations

edges = [(5, 1), (5, 0), (0, 6), (6, 2), (3, 7), (7, 4), (8, 1), (2, 10), (10, 3), (4, 9)]

ranks = {0: [0], 1: [8, 5], 2: [3, 1], 3: [6, 4, 7], 4: [9], 5: [2]}

for rank in range(1, len(ranks)):
    nodes = ranks[rank]
    min_crossings = float('inf')
    for nodes_permutation in permutations(nodes):
        crossings = 0
        for i in range(len(nodes_permutation)):
            for j in range(i + 1, len(nodes_permutation)):
                u = nodes_permutation[i]
                v = nodes_permutation[j]
                for e1, (s1, t1) in enumerate(edges):
                    if (s1 == u and t1 != v and t1 in nodes_permutation[i+1:j]) or (t1 == v and s1 != u and s1 in nodes_permutation[i:j-1]):
                        for e2, (s2, t2) in enumerate(edges[e1+1:], e1+1):
                            if (s2 == u and t2 == v) or (s2 == v and t2 == u):
                                break
                            if (s2 == u and t2 in nodes_permutation[i+1:j]) or (t2 == v and s2 in nodes_permutation[i:j-1]):
                                crossings += 1
                                break
        if crossings < min_crossings:
            min_crossings = crossings
            best_permutation = nodes_permutation
    ranks[rank] = best_permutation