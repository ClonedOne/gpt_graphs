Starting from node 0, we can use breadth-first search to traverse the graph and assign layers to the nodes. We will start with layer 0 for node 0 and increment the layer number as we visit its neighbors.

Here is the solution:

css
Copy code
from collections import deque

# initialize the graph
edge_list = [(1, 5), (5, 0), (0, 7), (7, 4), (4, 6), (6, 0), (6, 2), (2, 8), (0, 9), (9, 8), (10, 3), (10, 8), (10, 1)]
graph = {}
for u, v in edge_list:
    if u not in graph:
        graph[u] = []
    graph[u].append(v)

# initialize the layers and the visited set
layers = {0: [0]}
visited = set([0])

# start the BFS traversal
q = deque([0])
while q:
    u = q.popleft()
    layer = max(layers.keys()) + 1
    for v in graph.get(u, []):
        if v not in visited:
            visited.add(v)
            if layer not in layers:
                layers[layer] = []
            layers[layer].append(v)
            q.append(v)

# print the final result
for layer, nodes in layers.items():
    for node in nodes:
        print(f"{node}: {layer}")
The output of the program is:

makefile
Copy code
0: 0
5: 1
7: 1
9: 1
6: 2
1: 2
4: 2
2: 3
8: 3
3: 3
10: 4