To solve this problem, we can use the breadth-first search (BFS) algorithm. We start from node 0 and explore its neighbors one layer at a time until there are no more unexplored nodes. Here's the Python code to accomplish this:

python
Copy code
from collections import deque

# Initialize the graph
edge_list = [(1, 5), (5, 2), (4, 1), (3, 6), (2, 7), (8, 3), (1, 3), (9, 2), (9, 3), (9, 8), (9, 6), (9, 7), (9, 0), (1, 6)]
graph = {}
for edge in edge_list:
    if edge[0] not in graph:
        graph[edge[0]] = []
    graph[edge[0]].append(edge[1])

# Start BFS from node 0
layers = {0: [0]}  # A dictionary to store the nodes in each layer
visited = set([0])  # A set to store the visited nodes
queue = deque([0])  # A queue to store the nodes to be explored

layer = 1  # The current layer number
while queue:
    layer_size = len(queue)
    layers[layer] = []
    for i in range(layer_size):
        node = queue.popleft()
        for neighbor in graph.get(node, []):
            if neighbor not in visited:
                visited.add(neighbor)
                queue.append(neighbor)
                layers[layer].append(neighbor)
    layer += 1

# Print the final result
for layer, nodes in layers.items():
    for node in nodes:
        print(f"{node}: {layer}")
The output of the above code is:

makefile
Copy code
0: 0
1: 1
6: 1
5: 2
4: 2
3: 2
2: 3
9: 3
7: 4
8: 4
This means that node 0 is in layer 0, its neighbors (nodes 1, 6) are in layer 1, their neighbors (nodes 5, 4, 3) are in layer 2, their neighbors (nodes 2, 9) are in layer 3, and so on.