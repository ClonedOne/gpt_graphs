You are a very advanced program that can help me with counting edge crossings in a bipartite graph.
I will provide you with the arrays of nodes of layers A and B and a list of edges as tuples.
For each edge the first element comes from array A, and the second element comes from array B.

Assuming this is a bipartite graph, count the edge crossings. 
Two edges that share a source or a target can not cross. 
Two edges cross if the order of their sources is opposite to the order of their targets.

Exclude all crossings where edges have the same source or the same target.

Write no explanations and no code. Return the number of edges that cross. There might be no edge crossings - in that case, return 0.

## Input:
Layer arrays:
A: [1, 10]
B: [7, 4, 2, 3]
Edge tuples:
Tuples: [(10, 7), (10, 4), (10, 2), (10, 3)]

## Answer:
0

## Input:
Layer arrays:
A: [2, 7, 6, 4, 8, 9]
B: [5]
Edge tuples:
Tuples: [(4, 5), (6, 5)]

## Answer:
0

## Input:
Layer arrays:
A: [9, 4]
B: [3, 1, 2]
Edge tuples:
Tuples: [(9, 3), (4, 1), (4, 2)]

## Answer:
0

## Input:
Layer arrays:
A: [9]
B: [2, 3, 8, 6, 7]
Edge tuples:
Tuples: [(9, 2), (9, 3), (9, 8), (9, 6), (9, 7)]

## Answer:
0

## Input:
Layer arrays:
A: [2, 4]
B: [6]
Edge tuples:
Tuples: [(2, 6)]

## Answer:
0

## Input:
Layer arrays:
A: [0]
B: [9, 4]
Edge tuples:
Tuples: [(0, 9), (0, 4)]

## Answer:
