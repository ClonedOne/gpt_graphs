We want to reduce crossings on a graph drawing.
This is the list of edges. Every edge has [<source_id>, <target_id>]:
edges = [(1, 6), (6, 2), (2, 7), (7, 3), (2, 8), (8, 4), (5, 6), (5, 9), (9, 1), (10, 5), (10, 3), (10, 2), (10, 6), (10, 4), (10, 1), (10, 0), (10, 7)]

This is a dictionary that contains the ranks of the nodes: 
ranks = {0: [0], 1: [10], 2: [5, 3, 2, 6, 4, 1, 7], 3: [9, 8]}
it is defined so that ranks[<rank_number>] is equal to the list of nodes contained in that rank.

I want to order the nodes in the ranks so that there are few crossings in the graph. 
- visit every rank once, starting from rank 0
- try different transpositions of the nodes in that rank
- count the crossings for every transposition. There is a crossing between two edges e1 and e2 if the source of e1 comes before the source of e2, and the target of e1 comes after the target of e2 in the node orderings.
- record the transposition that produces the least amount of crossings, and sort the nodes accordingly.

write no code and no explanation.
return the ranks dictionary with the nodes ordered, in a code block.