We want to reduce crossings on a graph drawing.
We want to order the nodes in the layers so that there are few crossings in the graph. 
- visit every rank once, starting from layer 0
- try different transpositions of the nodes in that layer
- count the crossings for every transposition. There is a crossing between two edges e1 and e2 if the source of e1 comes before the source of e2, and the target of e1 comes after the target of e2 in the order of nodes in a layer.
- record the transposition that produces the least amount of crossings, and sort the nodes accordingly.
Nodes can NOT be moved to a different layer. You can only reorder nodes within layers.
Write no code and no explanation.
Return the layers dictionary with the nodes ordered, in a code block. I want it formatted like this: {<layer_id>:[<list of ordered nodes>]}

Input:
This is the list of edges. Every edge has [<source_id>, <target_id>]:
edges = [(1, 6), (2, 6), (6, 0), (0, 8), (8, 5), (5, 7), (7, 0), (7, 3), (3, 9), (9, 4)]
This is the description of what nodes are contained in what layer: 
ranks = Layer 0: [0]
Layer 1: [6, 8, 7]
Layer 2: [1, 2, 5, 3]
Layer 3: [9]
Layer 4: [4]
Answer:

{
0: [0],
1: [6, 8, 7],
2: [1, 2, 5, 3],
3: [9],
4: [4]
}

Input:
This is the list of edges. Every edge has [<source_id>, <target_id>]:
edges = [(1, 5), (5, 0), (0, 7), (7, 4), (4, 6), (6, 0), (8, 3), (5, 2), (2, 9), (9, 8), (10, 7), (10, 9), (10, 8)]
This is the description of what nodes are contained in what layer: 
ranks = Layer 0: [0]
Layer 1: [5, 7, 6]
Layer 2: [1, 2, 4, 10]
Layer 3: [9, 8]
Layer 4: [3]
Answer:

{
0: [0],
1: [6, 7, 5],
2: [4, 10, 2, 1],
3: [8, 9],
4: [3]
}

Input:
This is the list of edges. Every edge has [<source_id>, <target_id>]:
edges = [(0, 7), (7, 1), (7, 2), (2, 6), (5, 2), (5, 3), (4, 8), (8, 3), (2, 9), (9, 8), (10, 3), (10, 5)]
This is the description of what nodes are contained in what layer: 
ranks = Layer 0: [0]
Layer 1: [7]
Layer 2: [1, 2]
Layer 3: [6, 5, 9]
Layer 4: [3, 10, 8]
Layer 5: [4]
Answer:

{
0: [0],
1: [7],
2: [2, 1],
3: [5, 9, 6],
4: [3, 10, 8],
5: [4]
}

Input:
This is the list of edges. Every edge has [<source_id>, <target_id>]:
edges = [(5, 2), (2, 6), (6, 1), (1, 7), (7, 0), (0, 5), (0, 8), (8, 3), (3, 9), (9, 1), (3, 10), (10, 4)]
This is the description of what nodes are contained in what layer: 
ranks = Layer 0: [0]
Layer 1: [7, 5, 8]
Layer 2: [1, 2, 3]
Layer 3: [6, 9, 10]
Layer 4: [4]

Answer: